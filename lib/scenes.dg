%% Approximation of Inform scenes; scenes can be in progress or not; scenes can repeat.
%% Scenes are triggered by an initial condition, and end with another condition.
%% Scenes can be linked such that one scene starts when another begins.

%% Scenes have the (scene $) trait.

%% Scenes supply the (start $) predicate, which succeeds when the scene begins;
%% the predicate should also perform any state updates and provide any narration pertaining
%% to the start of the scene.

%% Started scenes will receive the flag ($ is happening) and ($ has started).

%% Scenes must supply the (complete $) predicate, the counterpart to (start $); 
%% when this succeeds, the ($ is happening) flag is cleared, and the ($ is complete) flag
%% is set.

%% On each tick, scenes complete before new scenes start; this allows scenes to start triggered
%% by other scenes being just completed.

%% By default, scenes execute once (once a scene has completed, no further checks
%% to see if it should start).
%% Scenes with the (recurring $) trait can start again even once completed.

%% The predicate (scene debugging enabled) will enable debug output as scenes are started, completed, or 'ticked'.

(scene $) (fail)
($ is happening) (fail)
($ has started) (fail)
(complete $) (fail)
($ is complete) (fail)
($ has completed) (fail)
(recurring $) (fail)

(scene debugging enabled)
    (fail)

%% Each scene that is happening at the start of the tick and not completed during the tick
%% is notified via this predicate.  It doesn't matter whether this predicate succeeds or fails.
(on every tick during scene $) (fail)

(on every tick)
    (identify completed scenes)
    (tick happening scenes)
    (identify starting scenes)
     
(identify completed scenes)
    (exhaust) {
        *(scene $Scene)
        ($Scene is happening)
        (complete $Scene)
        (if) (scene debugging enabled)
        (then)
            (log) { scene $Scene completed }
        (endif)
        (now) ~($Scene is happening)
        %% The scene has completed, at least once
        (now) ($Scene has completed)
        %% Important for recurring scenes
        (now) ($Scene is complete)
    }

(tick happening scenes)
    (exhaust) {
        *(scene $Scene)
        ($Scene is happening)
        (if) (scene debugging enabled)
        (then)
             (log) { scene $Scene is happening }
        (endif)
        (on every tick during $Scene)
    }

(identify starting scenes)
    (exhaust) {
        *(scene $Scene)
        (ready to start scene $Scene)
        (start $Scene)
        (if) (scene debugging enabled)
        (then)
          (log) { scene $Scene started }
        (endif)
        %% (log) { scene $Scene is now happening }
        (now) ($Scene is happening)
        %% The scene has started, at least once.
        %% Important for recurring scenes.
        (now) ($Scene has started)
    }

(ready to start scene $Scene)
    ~($Scene is happening)
    { ~($Scene is complete) (or) (recurring $Scene) }

(scenes)
    (exhaust) {
        *(scene $Scene)
        $Scene

        (annotate [{ (recurring $Scene) recurring}
                   { ($Scene has started) started }
                   { ($Scene is happening) happening }
                   { ($Scene is complete) complete }])
        (line)
    }
